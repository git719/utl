#!/bin/bash
# prepublish
# Tidy up and run checks before publishing

set -euo pipefail  # Fail on any error
export Gre='\e[1;32m' Red='\e[1;31m' Rst='\e[0m'
case "$OSTYPE" in
    "linux-gnu"* ) echo "==> OS = Linux" ;;
    "darwin"* ) echo "==> OS = macOS" ;;
    "msys"* ) echo "==> OS = GitBASH Windows" ;;
    * ) printf "==> OS = \"$OSTYPE\", unknown! (Options are Linux, macOS, or GitBASH on Windows)\n"
esac

printf "==> Following below practice:\n"
printf "    Publishing => https://go.dev/doc/modules/publishing (Not running list cmd to make mod fully available.)\n"
printf "    Versioning => https://go.dev/doc/modules/version-numbers\n"

printf "==> Running go fmt\n"
go fmt
printf "==> Running go mod tidy\n"
go mod tidy
printf "==> Grepping go.mod for 'replace'\n$Red$(grep replace go.mod)$Rst"
printf "==> HEAD of go.mod:\n"
head go.mod 
printf "\n==> Running 'go test ./...' - fix all test errors before proceeding.\n"
go test ./...
printf "\n\n==> Last 3 tag versions:\n"
git tag | sort -t "." -k1,1n -k2,2n -k3,3n | tail -3
CurrentTag=`git tag | sort -t "." -k1,1n -k2,2n -k3,3n | tail -1`
printf "\n==> Looks good to go! To publish, do below one-liner, advancing Tag version:\n\n"
printf "  Tag=$CurrentTag && git add . && git commit -m \"x updates\" && git tag \$Tag && git push origin \$Tag && git push\n\n"
