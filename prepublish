#!/bin/bash
# prepublish
# Tidy up and run checks before publishing

set -euo pipefail  # Fail on any error
case "$OSTYPE" in
    "linux-gnu"* ) echo "==> OS = Linux" ;;
    "darwin"* ) echo "==> OS = macOS" ;;
    "msys"* ) echo "==> OS = GitBASH Windows" ;;
    * ) printf "==> OS = \"$OSTYPE\", unknown! (Options are Linux, macOS, or GitBASH on Windows)\n"
esac

printf "==> Following below practice:\n"
printf "    Publishing => https://go.dev/doc/modules/publishing (Not running list cmd to make mod fully available.)\n"
printf "    Versioning => https://go.dev/doc/modules/version-numbers\n"

printf "==> Running go mod tidy\n"
go mod tidy
printf "==> Running go test ./... (fix any errors that my appear below)\n"
go test ./...

printf "\n\n==> Last 3 tag versions:\n"
git tag | tail -3
CurrentTag=`git tag | tail -1`
Prg=`head -1 go.mod | awk -F'/' '{print $NF}' | awk '{print $NF}'`
printf "\n==> Good to go. To publish, do below One-liner or multiple commands, advancing Tag version:\n\n"
printf "Tag=$CurrentTag && Prg=$Prg && git add . && git commit -m \"\$Prg: updates \$Tag\" && git tag \$Tag && git push origin \$Tag && git push\n\n"
printf "or\n\n"
printf "git add .\n"
printf "git commit -m \"$Prg: updates $CurrentTag\n"
printf "git tag $CurrentTag\n"
printf "git push origin $CurrentTag\n"
printf "git push\n\n"
